EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Prog5.exe_ -- emu8086 assembler version: 4.08  
 
[ 04/03/2023  --  13:42:09 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       PAGE 60,132         ; Numero de lineas y filas
[   2]        :                                       TITLE PROG5.EXE     ;Nombre del programa
[   3]        :                                       .MODEL SMALL        ;Habilita 2 segmentos de 64kb.
[   4]        :                                       ;_____________________________________
[   5]        :                                       
[   6]        :                                       .STACK 64           ;Definicion del segmento pila
[   7]        :                                       .DATA               ;Definicion del segmento datos
[   8]        :                                       ;_____________________________________
[   9]        :                                       .CODE               ;Comienzo del codigo
[  10]    0040:                                       BEGIN PROC FAR      ;Inicio de funcion BEGIN
[  11]    0040: B8 01 00                              MOV AX,01H          ;Movemos a AX el valor 01hexa
[  12]    0043: BB 01 00                              MOV BX,01H          ;Movemos a BX el valor 01 hexa
[  13]    0046: E8 05 00                              CALL B10            ;LLamamos a la funcion B10
[  14]    0049: B8 00 4C                              MOV AX,4C00H        ;Movemos el a el valor 4C00H
[  15]    004C: CD 21                                 INT 21H             ;Interrupcion 21H
[  16]        :                                       BEGIN ENDP          ;Termina la funcion BEGIN
[  17]        :                                       ;_____________________________________
[  18]    004E:                                       B10 PROC NEAR       ;Inicio de la funcion B10
[  19]    004E: B9 01 00                              MOV CX,01H          ;Movemos a CX el valor 01hexa
[  20]    0051: E8 03 00                              CALL C10            ;LLamamos a la funcion C10
[  21]    0054: D1 E1                                 SHL CX,1            ;Recorremos un valor a la izquierda en CX
[  22]    0056: C3                                    RET                 ;Retornamos a la afuncion anterior
[  23]        :                                       B10 ENDP            ;Termina la funcion B10
[  24]        :                                       ;_____________________________________
[  25]    0057:                                       C10 PROC NEAR       ;Inicia la funcion C10
[  26]    0057: 05 01 00                              ADD AX,01H          ;Sumamos lo que hay en AX y 01 hexa
[  27]    005A: 03 D8                                 ADD BX, AX          ;Sumamos lo que hay en BX y AX
[  28]    005C: C3                                    RET                 ;Retornamos a la afuncion anterior
[  29]        :                                       C10 ENDP            ;Termina la funcion C10
[  30]        :                                       ;_____________________________________
[  31]        :                                       END BEGIN           ;Fin del programa
[  32]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 5D      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 00      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 40      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: CC      -   check sum (l.byte)
0013: 87      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 04      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E to 01FF  -   reserved relocation area  (00) 




===================================================================================================
